{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/corrida.service\";\nimport * as i3 from \"src/app/services/tiempo-paro.service\";\nimport * as i4 from \"ngx-toastr\";\nexport let TiempoParoIngresarComponent = /*#__PURE__*/(() => {\n  class TiempoParoIngresarComponent {\n    constructor(fb, _corridaService, _tiempoParoService, eRef, toastr) {\n      this.fb = fb;\n      this._corridaService = _corridaService;\n      this._tiempoParoService = _tiempoParoService;\n      this.eRef = eRef;\n      this.toastr = toastr;\n      this.CorridasExtrusion = [];\n      this.cambio = new EventEmitter();\n      this.isFocusInsideComponent = false;\n      this.isComponentClicked = false;\n      this.contador = 0;\n      this.form = this.fb.group({\n        FechaInicio: ['', [Validators.required]],\n        FechaFinal: ['', [Validators.required]],\n        CausaDescripcion: ['', [Validators.required]]\n      });\n    }\n\n    clickout(event) {\n      if (this.contador == 0 || this.eRef.nativeElement.contains(event.target)) {\n        this.contador += 1;\n        this.isComponentClicked = true;\n        this.isFocusInsideComponent = true;\n      } else {\n        this.contador += 1;\n        this.cambio.emit(false);\n        this.isComponentClicked = false;\n        this.isFocusInsideComponent = false;\n        this.cortina[0].style.visibility = 'hidden';\n      }\n    }\n\n    ngOnChanges() {\n      this.cortina = document.getElementsByClassName(\"cortina\");\n\n      try {\n        this.CorridasExtrusion.push(this._corridaService.DatosCorridaNoFinalizada);\n        this.CorridasExtrusion.push(this._corridaService.CorridaExtrusion);\n      } catch (error) {}\n\n      this.DatosOperarioCorridaInicio = this._corridaService.DatosOperarioCorridaInicio; // Blocks the datetime for avoid the illogical data in bd\n\n      var search_date = document.getElementById(\"FechaInicio\");\n      search_date.min = this.DatosOperarioCorridaInicio.fechaHora;\n    } // It save the Tiempo paro\n\n\n    guardarTiempoParo() {\n      var _a, _b, _c;\n\n      var pk;\n\n      if (this._corridaService.CorridaNoFinalizadaActivar) {\n        pk = this.CorridasExtrusion[0][2][0][0].pk_CorridaExtrusion;\n      } else {\n        pk = this.CorridasExtrusion[1].pk_CorridaExtrusion;\n      }\n\n      const entrada = {\n        fk_CorridaExtrusion: pk,\n        fechaInicio: (_a = this.form.get('FechaInicio')) === null || _a === void 0 ? void 0 : _a.value,\n        fechaFinal: (_b = this.form.get('FechaFinal')) === null || _b === void 0 ? void 0 : _b.value,\n        causaDescripcion: (_c = this.form.get('CausaDescripcion')) === null || _c === void 0 ? void 0 : _c.value\n      };\n      var timeInicio = new Date(entrada.fechaInicio).getTime();\n      var timeInicioCorrida = new Date(this.DatosOperarioCorridaInicio.fechaHora).getTime();\n      var timeFinal = new Date(entrada.fechaFinal).getTime();\n\n      if (timeInicio > timeFinal || timeInicio < timeInicioCorrida) {\n        this.toastr.error('Ha ocurrido un error, la corrida no pudo ser finalizada la fecha de finalizacion es menor que la de entrada', 'Error');\n      } else {\n        this.InsertarTiempoParo(entrada);\n      }\n    } // This function allows you to insert the Tiempo paro\n\n\n    InsertarTiempoParo(entrada) {\n      this._tiempoParoService.saveTiempoParoExtrusion(entrada).subscribe(data => {\n        this.toastr.success('El tiempo de paro fue registrado con exito', 'Tiempo de paro registrado');\n        var fechaInicio = new Date(entrada.fechaInicio).getTime();\n        var fechaFin = new Date(entrada.fechaFinal).getTime();\n        var resta = fechaFin - fechaInicio;\n        var horas = resta / (1000 * 60 * 60);\n        this._tiempoParoService.TiempoParoTotal = this._tiempoParoService.TiempoParoTotal + horas;\n\n        if (this._tiempoParoService.TiempoParoActualizar) {\n          this._tiempoParoService.TiempoParoActualizar = false;\n        } else {\n          this._tiempoParoService.TiempoParoActualizar = true;\n        }\n\n        this.form.reset();\n      }, error => {\n        this.toastr.error('El tiempo de paro no pudo ser registrado con exito', 'Tiempo de paro error');\n        console.log(error);\n      });\n    } // This function allows you to limit the date\n\n\n    limitarFecha(entrada) {\n      // Blocks the datetime for avoid the illogical data in bd\n      var search_dateEntrada = document.getElementById(\"FechaInicio\");\n      var search_dateSalida = document.getElementById(\"FechaFinal\");\n      search_dateSalida.min = search_dateEntrada.value;\n    } // This function cancel the component Tiempo paro ingresar\n\n\n    cancelarTiempoParoIngresar() {\n      this.cambio.emit(false);\n      this.cortina[0].style.visibility = 'hidden';\n    }\n\n  }\n\n  TiempoParoIngresarComponent.ɵfac = function TiempoParoIngresarComponent_Factory(t) {\n    return new (t || TiempoParoIngresarComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CorridaService), i0.ɵɵdirectiveInject(i3.TiempoParoService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i4.ToastrService));\n  };\n\n  TiempoParoIngresarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TiempoParoIngresarComponent,\n    selectors: [[\"app-tiempo-paro-ingresar\"]],\n    hostBindings: function TiempoParoIngresarComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TiempoParoIngresarComponent_click_HostBindingHandler($event) {\n          return ctx.clickout($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      TiempoParoPermiso: \"TiempoParoPermiso\"\n    },\n    outputs: {\n      cambio: \"cambio\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 32,\n    vars: 2,\n    consts: [[1, \"relative\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"div-CorridaExtrusion\"], [1, \"title-tiempo-paro\"], [1, \"div-container\"], [\"for\", \"FechaInicio\"], [\"type\", \"datetime-local\", \"id\", \"FechaInicio\", \"formControlName\", \"FechaInicio\", \"maxlength\", \"\", 1, \"form-control\", 3, \"change\"], [\"id\", \"CausaDescripcion\", \"formControlName\", \"CausaDescripcion\", \"rows\", \"3\", 1, \"form-control\"], [\"for\", \"FechaFinal\"], [\"type\", \"datetime-local\", \"id\", \"FechaFinal\", \"formControlName\", \"FechaFinal\", \"maxlength\", \"\", 1, \"form-control\"], [1, \"div-buttons-extrusion-inicio\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"]],\n    template: function TiempoParoIngresarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function TiempoParoIngresarComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.guardarTiempoParo();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵelementStart(4, \"h2\", 3);\n        i0.ɵɵtext(5, \"Nuevo Tiempo de Paro\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵelementStart(8, \"div\");\n        i0.ɵɵelementStart(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Confirmar Fecha Inicial \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\");\n        i0.ɵɵelementStart(12, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function TiempoParoIngresarComponent_Template_input_change_12_listener($event) {\n          return ctx.limitarFecha($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵelementStart(14, \"h2\");\n        i0.ɵɵtext(15, \"Observacion\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\");\n        i0.ɵɵtext(17, \"Especifique con detalle la Causa o Descripcion del paro\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 4);\n        i0.ɵɵelement(19, \"textarea\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 4);\n        i0.ɵɵelementStart(21, \"div\");\n        i0.ɵɵelementStart(22, \"label\", 8);\n        i0.ɵɵtext(23, \"Confirmar Fecha Final\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\");\n        i0.ɵɵelement(25, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 4);\n        i0.ɵɵelementStart(27, \"div\", 10);\n        i0.ɵɵelementStart(28, \"button\", 11);\n        i0.ɵɵtext(29, \"Aceptar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function TiempoParoIngresarComponent_Template_button_click_30_listener() {\n          return ctx.cancelarTiempoParoIngresar();\n        });\n        i0.ɵɵtext(31, \"Cancelar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(27);\n        i0.ɵɵproperty(\"disabled\", ctx.form.invalid || !ctx.TiempoParoPermiso);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.MaxLengthValidator],\n    styles: [\".absolute[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%}.relative[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);position:fixed;bottom:auto;z-index:1047;display:flex;flex-direction:column;max-width:100%;background-color:#fff;background-clip:border-box;outline:0;transition:transform .3s;border-radius:20px;text-align:center;padding:30px;background-clip:padding-box;border:1px solid}.title-tiempo-paro[_ngcontent-%COMP%]{font-weight:bold;margin-top:20px}.btn-secondary[_ngcontent-%COMP%]{color:#a7a8ab;background-color:#fff;border-color:#e9ebf0}.btn-primary[_ngcontent-%COMP%]{color:#fff;background-color:#13a8bc;border-color:#13a8bc}.div-buttons-extrusion-inicio[_ngcontent-%COMP%]{margin:20px}.div-buttons-extrusion-inicio[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:8px;padding:15px;padding-inline:40px}.needs-bold[_ngcontent-%COMP%]{font-weight:bold}.div-container[_ngcontent-%COMP%]{margin-bottom:20px}.iniciarNuevaCorrida[_ngcontent-%COMP%]:active{background-color:#000}.form-control[_ngcontent-%COMP%]{border-radius:.6rem;display:inline-flex;width:70%}.form-select[_ngcontent-%COMP%]{display:unset;width:70%;border-radius:.6rem;margin-bottom:4%}\"]\n  });\n  return TiempoParoIngresarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}