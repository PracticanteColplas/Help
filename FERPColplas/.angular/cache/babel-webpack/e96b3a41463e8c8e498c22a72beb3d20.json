{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Practicante Sistemas/Desktop/FERPColplas/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from '@angular/core';\nimport { isDevMode, Directive, Input, Component, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport qrcode from 'qrcode';\n\nfunction QrCodeComponent_canvas_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"canvas\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"qrCode\", ctx_r0.value)(\"qrCodeErrorCorrectionLevel\", ctx_r0.errorCorrectionLevel)(\"qrCodeCenterImageSrc\", ctx_r0.centerImageSrc)(\"qrCodeCenterImageWidth\", ctx_r0.centerImageSize)(\"qrCodeCenterImageHeight\", ctx_r0.centerImageSize)(\"qrCodeMargin\", ctx_r0.margin)(\"width\", ctx_r0.size)(\"height\", ctx_r0.size)(\"darkColor\", ctx_r0.darkColor)(\"lightColor\", ctx_r0.lightColor);\n  }\n}\n\nconst validColorRegex = /^#(?:[0-9a-fA-F]{3,4}){1,2}$/;\n\nclass QrCodeDirective {\n  constructor(viewContainerRef) {\n    this.viewContainerRef = viewContainerRef; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n    this.errorCorrectionLevel = QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;\n    this.darkColor = \"#000000FF\";\n    this.lightColor = \"#FFFFFFFF\"; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n    this.margin = 16;\n  }\n\n  ngOnChanges() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.value) {\n        return;\n      }\n\n      if (_this.version && _this.version > 40) {\n        console.warn(\"[qrCode] max version is 40, clamping\");\n        _this.version = 40;\n      } else if (_this.version && _this.version < 1) {\n        console.warn(\"[qrCode] min version is 1, clamping\");\n        _this.version = 1;\n      } else if (_this.version !== undefined && isNaN(_this.version)) {\n        console.warn(\"[qrCode] version should be set to a number, defaulting to auto\");\n        _this.version = undefined;\n      }\n\n      const canvas = _this.viewContainerRef.element.nativeElement;\n\n      if (!canvas) {\n        // native element not available on server side rendering\n        return;\n      }\n\n      const context = canvas.getContext(\"2d\");\n\n      if (context) {\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n      }\n\n      const errorCorrectionLevel = _this.errorCorrectionLevel ?? QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;\n      const dark = validColorRegex.test(_this.darkColor) ? _this.darkColor : undefined;\n      const light = validColorRegex.test(_this.lightColor) ? _this.lightColor : undefined;\n\n      if (isDevMode()) {\n        if (!dark && _this.darkColor) {\n          console.error(\"[ng-qrcode] darkColor set to invalid value, must be RGBA hex color string, eg: #3050A1FF\");\n        }\n\n        if (!light && _this.lightColor) {\n          console.error(\"[ng-qrcode] lightColor set to invalid value, must be RGBA hex color string, eg: #3050A130\");\n        }\n      }\n\n      yield qrcode.toCanvas(canvas, _this.value, {\n        version: _this.version,\n        errorCorrectionLevel,\n        width: _this.width,\n        margin: _this.margin,\n        color: {\n          dark,\n          light\n        }\n      });\n      const centerImageSrc = _this.centerImageSrc;\n      const centerImageWidth = getIntOrDefault(_this.centerImageWidth, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);\n      const centerImageHeight = getIntOrDefault(_this.centerImageHeight, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);\n\n      if (centerImageSrc && context) {\n        if (!_this.centerImage) {\n          _this.centerImage = new Image(centerImageWidth, centerImageHeight);\n        }\n\n        if (centerImageSrc !== _this.centerImage?.src) {\n          _this.centerImage.src = centerImageSrc;\n        }\n\n        if (centerImageWidth !== _this.centerImage.width) {\n          _this.centerImage.width = centerImageWidth;\n        }\n\n        if (centerImageHeight !== _this.centerImage.height) {\n          _this.centerImage.height = centerImageHeight;\n        }\n\n        const centerImage = _this.centerImage;\n\n        centerImage.onload = () => {\n          context.drawImage(centerImage, canvas.width / 2 - centerImageWidth / 2, canvas.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n        };\n      }\n    })();\n  }\n\n}\n\nQrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL = \"M\";\nQrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE = 40;\n\nQrCodeDirective.ɵfac = function QrCodeDirective_Factory(t) {\n  return new (t || QrCodeDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nQrCodeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: QrCodeDirective,\n  selectors: [[\"canvas\", \"qrCode\", \"\"]],\n  inputs: {\n    value: [\"qrCode\", \"value\"],\n    version: [\"qrCodeVersion\", \"version\"],\n    errorCorrectionLevel: [\"qrCodeErrorCorrectionLevel\", \"errorCorrectionLevel\"],\n    width: \"width\",\n    height: \"height\",\n    darkColor: \"darkColor\",\n    lightColor: \"lightColor\",\n    centerImageSrc: [\"qrCodeCenterImageSrc\", \"centerImageSrc\"],\n    centerImageWidth: [\"qrCodeCenterImageWidth\", \"centerImageWidth\"],\n    centerImageHeight: [\"qrCodeCenterImageHeight\", \"centerImageHeight\"],\n    margin: [\"qrCodeMargin\", \"margin\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QrCodeDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: `canvas[qrCode]`\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  }, {\n    value: [{\n      type: Input,\n      args: [\"qrCode\"]\n    }],\n    version: [{\n      type: Input,\n      args: [\"qrCodeVersion\"]\n    }],\n    errorCorrectionLevel: [{\n      type: Input,\n      args: [\"qrCodeErrorCorrectionLevel\"]\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    darkColor: [{\n      type: Input\n    }],\n    lightColor: [{\n      type: Input\n    }],\n    centerImageSrc: [{\n      type: Input,\n      args: [\"qrCodeCenterImageSrc\"]\n    }],\n    centerImageWidth: [{\n      type: Input,\n      args: [\"qrCodeCenterImageWidth\"]\n    }],\n    centerImageHeight: [{\n      type: Input,\n      args: [\"qrCodeCenterImageHeight\"]\n    }],\n    margin: [{\n      type: Input,\n      args: [\"qrCodeMargin\"]\n    }]\n  });\n})();\n\nfunction getIntOrDefault(value, defaultValue) {\n  if (value === undefined || value === \"\") {\n    return defaultValue;\n  }\n\n  if (typeof value === \"string\") {\n    return parseInt(value, 10);\n  }\n\n  return value;\n}\n\nclass QrCodeComponent {}\n\nQrCodeComponent.ɵfac = function QrCodeComponent_Factory(t) {\n  return new (t || QrCodeComponent)();\n};\n\nQrCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: QrCodeComponent,\n  selectors: [[\"qr-code\"]],\n  inputs: {\n    value: \"value\",\n    size: \"size\",\n    darkColor: \"darkColor\",\n    lightColor: \"lightColor\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    centerImageSrc: \"centerImageSrc\",\n    centerImageSize: \"centerImageSize\",\n    margin: \"margin\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"qrCode\", \"qrCodeErrorCorrectionLevel\", \"qrCodeCenterImageSrc\", \"qrCodeCenterImageWidth\", \"qrCodeCenterImageHeight\", \"qrCodeMargin\", \"width\", \"height\", \"darkColor\", \"lightColor\", 4, \"ngIf\"], [3, \"qrCode\", \"qrCodeErrorCorrectionLevel\", \"qrCodeCenterImageSrc\", \"qrCodeCenterImageWidth\", \"qrCodeCenterImageHeight\", \"qrCodeMargin\", \"width\", \"height\", \"darkColor\", \"lightColor\"]],\n  template: function QrCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, QrCodeComponent_canvas_0_Template, 1, 10, \"canvas\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.value);\n    }\n  },\n  directives: [i1.NgIf, QrCodeDirective],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QrCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: \"qr-code\",\n      template: `\n    <canvas *ngIf=\"value\"\n            [qrCode]=\"value\"\n            [qrCodeErrorCorrectionLevel]=\"errorCorrectionLevel\"\n            [qrCodeCenterImageSrc]=\"centerImageSrc\"\n            [qrCodeCenterImageWidth]=\"centerImageSize\"\n            [qrCodeCenterImageHeight]=\"centerImageSize\"\n            [qrCodeMargin]=\"margin\"\n            [width]=\"size\"\n            [height]=\"size\"\n            [darkColor]=\"darkColor\"\n            [lightColor]=\"lightColor\"\n    >\n    </canvas>\n  `,\n      styles: []\n    }]\n  }], null, {\n    value: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    darkColor: [{\n      type: Input\n    }],\n    lightColor: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    centerImageSrc: [{\n      type: Input\n    }],\n    centerImageSize: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }]\n  });\n})();\n\nclass QrCodeModule {}\n\nQrCodeModule.ɵfac = function QrCodeModule_Factory(t) {\n  return new (t || QrCodeModule)();\n};\n\nQrCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QrCodeModule\n});\nQrCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QrCodeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [QrCodeComponent, QrCodeDirective],\n      imports: [CommonModule],\n      exports: [QrCodeComponent, QrCodeDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QrCodeComponent, QrCodeDirective, QrCodeModule };","map":{"version":3,"sources":["C:/Users/Practicante Sistemas/Desktop/FERPColplas/node_modules/ng-qrcode/fesm2020/ng-qrcode.mjs"],"names":["i0","isDevMode","Directive","Input","Component","NgModule","i1","CommonModule","qrcode","validColorRegex","QrCodeDirective","constructor","viewContainerRef","errorCorrectionLevel","DEFAULT_ERROR_CORRECTION_LEVEL","darkColor","lightColor","margin","ngOnChanges","value","version","console","warn","undefined","isNaN","canvas","element","nativeElement","context","getContext","clearRect","width","height","dark","test","light","error","toCanvas","color","centerImageSrc","centerImageWidth","getIntOrDefault","DEFAULT_CENTER_IMAGE_SIZE","centerImageHeight","centerImage","Image","src","onload","drawImage","ɵfac","ViewContainerRef","ɵdir","type","args","selector","defaultValue","parseInt","QrCodeComponent","ɵcmp","NgIf","template","styles","size","centerImageSize","QrCodeModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { isDevMode, Directive, Input, Component, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport qrcode from 'qrcode';\n\nconst validColorRegex = /^#(?:[0-9a-fA-F]{3,4}){1,2}$/;\nclass QrCodeDirective {\n    constructor(viewContainerRef) {\n        this.viewContainerRef = viewContainerRef;\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.errorCorrectionLevel = QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;\n        this.darkColor = \"#000000FF\";\n        this.lightColor = \"#FFFFFFFF\";\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.margin = 16;\n    }\n    async ngOnChanges() {\n        if (!this.value) {\n            return;\n        }\n        if (this.version && this.version > 40) {\n            console.warn(\"[qrCode] max version is 40, clamping\");\n            this.version = 40;\n        }\n        else if (this.version && this.version < 1) {\n            console.warn(\"[qrCode] min version is 1, clamping\");\n            this.version = 1;\n        }\n        else if (this.version !== undefined && isNaN(this.version)) {\n            console.warn(\"[qrCode] version should be set to a number, defaulting to auto\");\n            this.version = undefined;\n        }\n        const canvas = this.viewContainerRef.element.nativeElement;\n        if (!canvas) {\n            // native element not available on server side rendering\n            return;\n        }\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n        }\n        const errorCorrectionLevel = this.errorCorrectionLevel ?? QrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL;\n        const dark = validColorRegex.test(this.darkColor) ? this.darkColor : undefined;\n        const light = validColorRegex.test(this.lightColor) ? this.lightColor : undefined;\n        if (isDevMode()) {\n            if (!dark && this.darkColor) {\n                console.error(\"[ng-qrcode] darkColor set to invalid value, must be RGBA hex color string, eg: #3050A1FF\");\n            }\n            if (!light && this.lightColor) {\n                console.error(\"[ng-qrcode] lightColor set to invalid value, must be RGBA hex color string, eg: #3050A130\");\n            }\n        }\n        await qrcode\n            .toCanvas(canvas, this.value, {\n            version: this.version,\n            errorCorrectionLevel,\n            width: this.width,\n            margin: this.margin,\n            color: {\n                dark,\n                light,\n            },\n        });\n        const centerImageSrc = this.centerImageSrc;\n        const centerImageWidth = getIntOrDefault(this.centerImageWidth, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);\n        const centerImageHeight = getIntOrDefault(this.centerImageHeight, QrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE);\n        if (centerImageSrc && context) {\n            if (!this.centerImage) {\n                this.centerImage = new Image(centerImageWidth, centerImageHeight);\n            }\n            if (centerImageSrc !== this.centerImage?.src) {\n                this.centerImage.src = centerImageSrc;\n            }\n            if (centerImageWidth !== this.centerImage.width) {\n                this.centerImage.width = centerImageWidth;\n            }\n            if (centerImageHeight !== this.centerImage.height) {\n                this.centerImage.height = centerImageHeight;\n            }\n            const centerImage = this.centerImage;\n            centerImage.onload = () => {\n                context.drawImage(centerImage, canvas.width / 2 - centerImageWidth / 2, canvas.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n            };\n        }\n    }\n}\nQrCodeDirective.DEFAULT_ERROR_CORRECTION_LEVEL = \"M\";\nQrCodeDirective.DEFAULT_CENTER_IMAGE_SIZE = 40;\nQrCodeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nQrCodeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: QrCodeDirective, selector: \"canvas[qrCode]\", inputs: { value: [\"qrCode\", \"value\"], version: [\"qrCodeVersion\", \"version\"], errorCorrectionLevel: [\"qrCodeErrorCorrectionLevel\", \"errorCorrectionLevel\"], width: \"width\", height: \"height\", darkColor: \"darkColor\", lightColor: \"lightColor\", centerImageSrc: [\"qrCodeCenterImageSrc\", \"centerImageSrc\"], centerImageWidth: [\"qrCodeCenterImageWidth\", \"centerImageWidth\"], centerImageHeight: [\"qrCodeCenterImageHeight\", \"centerImageHeight\"], margin: [\"qrCodeMargin\", \"margin\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: `canvas[qrCode]`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { value: [{\n                type: Input,\n                args: [\"qrCode\"]\n            }], version: [{\n                type: Input,\n                args: [\"qrCodeVersion\"]\n            }], errorCorrectionLevel: [{\n                type: Input,\n                args: [\"qrCodeErrorCorrectionLevel\"]\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], darkColor: [{\n                type: Input\n            }], lightColor: [{\n                type: Input\n            }], centerImageSrc: [{\n                type: Input,\n                args: [\"qrCodeCenterImageSrc\"]\n            }], centerImageWidth: [{\n                type: Input,\n                args: [\"qrCodeCenterImageWidth\"]\n            }], centerImageHeight: [{\n                type: Input,\n                args: [\"qrCodeCenterImageHeight\"]\n            }], margin: [{\n                type: Input,\n                args: [\"qrCodeMargin\"]\n            }] } });\nfunction getIntOrDefault(value, defaultValue) {\n    if (value === undefined || value === \"\") {\n        return defaultValue;\n    }\n    if (typeof value === \"string\") {\n        return parseInt(value, 10);\n    }\n    return value;\n}\n\nclass QrCodeComponent {\n}\nQrCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nQrCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.2\", type: QrCodeComponent, selector: \"qr-code\", inputs: { value: \"value\", size: \"size\", darkColor: \"darkColor\", lightColor: \"lightColor\", errorCorrectionLevel: \"errorCorrectionLevel\", centerImageSrc: \"centerImageSrc\", centerImageSize: \"centerImageSize\", margin: \"margin\" }, ngImport: i0, template: `\n    <canvas *ngIf=\"value\"\n            [qrCode]=\"value\"\n            [qrCodeErrorCorrectionLevel]=\"errorCorrectionLevel\"\n            [qrCodeCenterImageSrc]=\"centerImageSrc\"\n            [qrCodeCenterImageWidth]=\"centerImageSize\"\n            [qrCodeCenterImageHeight]=\"centerImageSize\"\n            [qrCodeMargin]=\"margin\"\n            [width]=\"size\"\n            [height]=\"size\"\n            [darkColor]=\"darkColor\"\n            [lightColor]=\"lightColor\"\n    >\n    </canvas>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: QrCodeDirective, selector: \"canvas[qrCode]\", inputs: [\"qrCode\", \"qrCodeVersion\", \"qrCodeErrorCorrectionLevel\", \"width\", \"height\", \"darkColor\", \"lightColor\", \"qrCodeCenterImageSrc\", \"qrCodeCenterImageWidth\", \"qrCodeCenterImageHeight\", \"qrCodeMargin\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"qr-code\",\n                    template: `\n    <canvas *ngIf=\"value\"\n            [qrCode]=\"value\"\n            [qrCodeErrorCorrectionLevel]=\"errorCorrectionLevel\"\n            [qrCodeCenterImageSrc]=\"centerImageSrc\"\n            [qrCodeCenterImageWidth]=\"centerImageSize\"\n            [qrCodeCenterImageHeight]=\"centerImageSize\"\n            [qrCodeMargin]=\"margin\"\n            [width]=\"size\"\n            [height]=\"size\"\n            [darkColor]=\"darkColor\"\n            [lightColor]=\"lightColor\"\n    >\n    </canvas>\n  `,\n                    styles: [],\n                }]\n        }], propDecorators: { value: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], darkColor: [{\n                type: Input\n            }], lightColor: [{\n                type: Input\n            }], errorCorrectionLevel: [{\n                type: Input\n            }], centerImageSrc: [{\n                type: Input\n            }], centerImageSize: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }] } });\n\nclass QrCodeModule {\n}\nQrCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQrCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeModule, declarations: [QrCodeComponent,\n        QrCodeDirective], imports: [CommonModule], exports: [QrCodeComponent,\n        QrCodeDirective] });\nQrCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeModule, imports: [[\n            CommonModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: QrCodeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        QrCodeComponent,\n                        QrCodeDirective,\n                    ],\n                    imports: [\n                        CommonModule,\n                    ],\n                    exports: [\n                        QrCodeComponent,\n                        QrCodeDirective,\n                    ],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QrCodeComponent, QrCodeDirective, QrCodeModule };\n"]},"metadata":{},"sourceType":"module"}